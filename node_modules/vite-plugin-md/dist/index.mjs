var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// src/index.ts
import { createFilter } from "@rollup/pluginutils";

// src/markdown.ts
import MarkdownIt from "markdown-it";
import matter from "gray-matter";
import { toArray } from "@antfu/utils";
var scriptSetupRE = /<\s*script[^>]*\bsetup\b[^>]*>([\s\S]*)<\/script>/mg;
var defineExposeRE = /defineExpose\s*\(/mg;
function extractScriptSetup(html) {
  const scripts = [];
  html = html.replace(scriptSetupRE, (_, script) => {
    scripts.push(script);
    return "";
  });
  return { html, scripts };
}
function extractCustomBlock(html, options) {
  const blocks = [];
  for (const tag of options.customSfcBlocks) {
    html = html.replace(new RegExp(`<${tag}[^>]*\\b[^>]*>[^<>]*<\\/${tag}>`, "mg"), (code) => {
      blocks.push(code);
      return "";
    });
  }
  return { html, blocks };
}
function createMarkdown(options) {
  const isVue2 = options.vueVersion.startsWith("2.");
  const markdown = new MarkdownIt(__spreadValues({
    html: true,
    linkify: true,
    typographer: true
  }, options.markdownItOptions));
  markdown.linkify.set({ fuzzyLink: false });
  options.markdownItUses.forEach((e) => {
    const [plugin, options2] = toArray(e);
    markdown.use(plugin, options2);
  });
  options.markdownItSetup(markdown);
  return (id, raw) => {
    const { wrapperClasses, wrapperComponent, transforms, headEnabled, frontmatterPreprocess } = options;
    raw = raw.trimStart();
    if (transforms.before)
      raw = transforms.before(raw, id);
    const { content: md, data } = options.frontmatter ? matter(raw) : { content: raw, data: null };
    let html = markdown.render(md, { id });
    if (wrapperClasses)
      html = `<div class="${wrapperClasses}">${html}</div>`;
    else
      html = `<div>${html}</div>`;
    if (wrapperComponent)
      html = `<${wrapperComponent}${options.frontmatter ? ' :frontmatter="frontmatter"' : ""}>${html}</${wrapperComponent}>`;
    if (transforms.after)
      html = transforms.after(html, id);
    if (options.escapeCodeTagInterpolation) {
      html = html.replace(/<code(.*?)>/g, "<code$1 v-pre>");
    }
    const hoistScripts = extractScriptSetup(html);
    html = hoistScripts.html;
    const customBlocks = extractCustomBlock(html, options);
    html = customBlocks.html;
    const scriptLines = [];
    if (options.frontmatter) {
      const { head, frontmatter } = frontmatterPreprocess(data || {}, options);
      scriptLines.push(`const frontmatter = ${JSON.stringify(frontmatter)}`);
      if (!isVue2 && options.exposeFrontmatter && !defineExposeRE.test(hoistScripts.scripts.join("")))
        scriptLines.push("defineExpose({ frontmatter })");
      if (!isVue2 && headEnabled && head) {
        scriptLines.push(`const head = ${JSON.stringify(head)}`);
        scriptLines.unshift('import { useHead } from "@vueuse/head"');
        scriptLines.push("useHead(head)");
      }
    }
    scriptLines.push(...hoistScripts.scripts);
    const scripts = isVue2 ? `<script>
${scriptLines.join("\n")}
export default { data() { return { frontmatter } } }
<\/script>` : `<script setup>
${scriptLines.join("\n")}
<\/script>`;
    const sfc = `<template>${html}</template>
${scripts}
${customBlocks.blocks.join("\n")}
`;
    return sfc;
  };
}

// src/options.ts
import { toArray as toArray2 } from "@antfu/utils";

// src/head.ts
var headProperties = [
  "title",
  "meta",
  "link",
  "base",
  "style",
  "script",
  "htmlAttrs",
  "bodyAttrs"
];
function preprocessHead(frontmatter, options) {
  if (!options.headEnabled)
    return frontmatter;
  const head = options.headField ? frontmatter[options.headField] || {} : frontmatter;
  const meta = head.meta = head.meta || [];
  if (head.title) {
    if (!meta.find((i) => i.property === "og:title"))
      meta.push({ property: "og:title", content: head.title });
  }
  if (head.description) {
    if (!meta.find((i) => i.property === "og:description"))
      meta.push({ property: "og:description", content: head.description });
    if (!meta.find((i) => i.name === "description"))
      meta.push({ name: "description", content: head.description });
  }
  if (head.image) {
    if (!meta.find((i) => i.property === "og:image"))
      meta.push({ property: "og:image", content: head.image });
    if (!meta.find((i) => i.property === "twitter:card"))
      meta.push({ name: "twitter:card", content: "summary_large_image" });
  }
  const result = {};
  for (const [key, value] of Object.entries(head)) {
    if (headProperties.includes(key))
      result[key] = value;
  }
  return Object.entries(result).length === 0 ? null : result;
}

// src/utils.ts
function getVueVersion(defaultVersion = "3.2.0") {
  try {
    let v = __require("vue");
    if (v.default)
      v = v.default;
    return v.version || defaultVersion;
  } catch (e) {
    return defaultVersion;
  }
}

// src/options.ts
function resolveOptions(userOptions) {
  const options = Object.assign({
    headEnabled: false,
    headField: "",
    frontmatter: true,
    exposeFrontmatter: true,
    escapeCodeTagInterpolation: true,
    customSfcBlocks: ["route", "i18n", "style"],
    markdownItOptions: {},
    markdownItUses: [],
    markdownItSetup: () => {
    },
    wrapperClasses: "markdown-body",
    wrapperComponent: null,
    transforms: {},
    frontmatterPreprocess: (frontmatter, options2) => {
      const head = preprocessHead(frontmatter, options2);
      return { head, frontmatter };
    }
  }, userOptions);
  options.wrapperClasses = toArray2(options.wrapperClasses).filter((i) => i).join(" ");
  options.vueVersion = options.vueVersion || getVueVersion();
  return options;
}

// src/index.ts
function VitePluginMarkdown(userOptions = {}) {
  const options = resolveOptions(userOptions);
  const markdownToVue = createMarkdown(options);
  const filter = createFilter(userOptions.include || /\.md$/, userOptions.exclude);
  return {
    name: "vite-plugin-md",
    enforce: "pre",
    transform(raw, id) {
      if (!filter(id))
        return;
      try {
        return markdownToVue(id, raw);
      } catch (e) {
        this.error(e);
      }
    },
    async handleHotUpdate(ctx) {
      if (!filter(ctx.file))
        return;
      const defaultRead = ctx.read;
      ctx.read = async function() {
        return markdownToVue(ctx.file, await defaultRead());
      };
    }
  };
}
var src_default = VitePluginMarkdown;
export {
  src_default as default
};
