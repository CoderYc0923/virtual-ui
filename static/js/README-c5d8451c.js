import{c as t}from"./index-a7ba88c7.js";import{d,m as e,o as l,C as a,g as o,h as r,q as s,j as i,n,b as h,s as u,l as f,y as c}from"./vue-90884f3d.js";const E=d({__name:"baseWaterfallFlow",setup(d){const h=e([]);return l((()=>{(()=>{for(let d=0;d<90;d++)h.value.push({style:t()})})()})),(t,d)=>{const e=a("vir-waterfall-flow");return o(),r(e,{"data-list":h.value,columns:4,height:600,gap:10},{"slot-scope":s((({slotProps:t})=>[i("div",{style:n(t.data.style)},null,4)])),_:1},8,["data-list"])}}}),w={style:{height:"600px"}},p=d({__name:"infiniteWaterfallFlow",setup(d){const r=e([]),f=e(!1),c=e(!1),E=()=>{c.value||(f.value=!0,setTimeout((()=>{for(let d=90;d<180;d++)r.value.push({style:t()});c.value=!0,f.value=!1}),1500))};return l((()=>{(()=>{for(let d=0;d<90;d++)r.value.push({style:t()})})()})),(t,d)=>{const e=a("vir-waterfall-flow"),l=a("vir-infinite-scroll");return o(),h("div",w,[u(l,{onReachedTrigger:E,loading:f.value},{default:s((()=>[u(e,{"data-list":r.value,columns:5,gap:10,overflow:"visible"},{"slot-scope":s((({slotProps:t})=>[i("div",{style:n(t.data.style)},null,4)])),_:1},8,["data-list"])])),_:1},8,["loading"])])}}}),b={class:"markdown-body"},v=f('<h1 id="waterfallflow-%E7%80%91%E5%B8%83%E6%B5%81%E5%AE%B9%E5%99%A8" tabindex="-1">WaterfallFlow 瀑布流容器</h1><p>使用 CSS <code>Grid</code>布局方案，性能消耗低。</p><h2 id="%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95" tabindex="-1">基础用法</h2><p>通过<code>width</code> <code>height</code> <code>colums</code> <code>gap</code>来定义瀑布流容器的宽高、列数和间隔。</p>',4),m=i("h2",{id:"%E7%BB%93%E5%90%88-infinitescroll-%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8%E7%80%91%E5%B8%83%E6%B5%81%E5%AE%B9%E5%99%A8",tabindex:"-1"},"结合 InfiniteScroll 实现无限滚动瀑布流容器",-1),g=i("blockquote",null,[i("p",null,[c("Tip"),i("br"),c(" 注意："),i("code",null,"overflow"),c("设置为visible时,无需设置"),i("code",null,"height"),c("属性(当然设置了也没有用)")])],-1),y=f('<h2 id="waterfallflow-%E5%B1%9E%E6%80%A7" tabindex="-1">WaterfallFlow 属性</h2><table><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>width</td><td>容器宽</td><td>number、string</td><td>—</td><td>100%</td></tr><tr><td>height</td><td>容器高</td><td>number、string</td><td>—</td><td>100%</td></tr><tr><td>overflow</td><td>容器溢出类型</td><td>string</td><td>auto、visible</td><td>auto</td></tr><tr><td>dataList</td><td>数据</td><td>array</td><td>—</td><td>[]</td></tr><tr><td>columns</td><td>列数</td><td>number</td><td>—</td><td>2</td></tr><tr><td>gap</td><td>间隔</td><td>number</td><td>—</td><td>5</td></tr></tbody></table><h2 id="waterfallflow-%E6%8F%92%E6%A7%BD" tabindex="-1">WaterfallFlow 插槽</h2><table><thead><tr><th>插槽名</th><th>说明</th></tr></thead><tbody><tr><td>slot-scope</td><td>插槽自定义内容区只需填入每个瀑布流元素即可</td></tr></tbody></table>',4),A={__name:"README",setup:(t,{expose:d})=>(d({frontmatter:{}}),(t,d)=>{const e=a("show-code");return o(),h("div",b,[v,u(e,{showPath:"waterfallflow/components/baseWaterfallFlow"},{default:s((()=>[u(E)])),_:1}),m,g,u(e,{showPath:"waterfallflow/components/infiniteWaterfallFlow"},{default:s((()=>[u(p)])),_:1}),y])})};export{A as default};
