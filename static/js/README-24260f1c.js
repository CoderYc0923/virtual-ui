var t=Object.defineProperty,s=(s,i,o)=>(((s,i,o)=>{i in s?t(s,i,{enumerable:!0,configurable:!0,writable:!0,value:o}):s[i]=o})(s,"symbol"!=typeof i?i+"":i,o),o);import{d as i,m as o,C as e,g as n,b as d,s as a,q as h,y as u,l as r}from"./vue-90884f3d.js";class l{constructor(t){s(this,"limit",5),s(this,"runningCount"),s(this,"waitQueue"),s(this,"runningQueue"),s(this,"isStop",!1),s(this,"debug",!1),s(this,"taskId"),s(this,"finishCallBack"),s(this,"taskFinish"),s(this,"customTaskInfo",{}),this.limit=t.maxCount?t.maxCount:this.limit,this.debug=!!t.debug,this.customTaskInfo=t.customTaskInfo?t.customTaskInfo:{},t.onFinish&&(this.finishCallBack=t.onFinish),t.onTaskFinish&&(this.taskFinish=t.onTaskFinish),this.runningCount=0,this.taskId=0,this.waitQueue=[],this.runningQueue=new Map}addTask(t){return new Promise(((s,i)=>{const o={task:t,taskId:this.taskId++,taskStatus:"pending",customInfo:this.customTaskInfo,resolve:s,reject:i};this.runningCount<this.limit?(this.debug&&console.log("任务添加：当前并发数",this.runningCount,`并发数量未满，任务id${o.taskId} 直接运行`),this.runTask(o)):(this.debug&&console.log("任务添加：当前并发数",this.runningCount,`并发数量已满，任务id${o.taskId} 挂起等待`),this.waitQueue.push(o))}))}stopTask(){return this.isStop=!0,Array.from(this.runningQueue.values())}runTask(t){this.isStop||(this.runningQueue.set(t.taskId,t),this.runningCount++,t.task().then((s=>{this.runningCount--,this.runningQueue.delete(t.taskId),t.resolve(s),t.taskStatus="fulfilled",this.taskFinish&&this.taskFinish(t),this.debug&&console.log(`任务id${t.taskId}完成，完成回调：[${s}]`,"当前并发数",this.runningCount),this.checkQueue()})).catch((s=>{this.runningCount--,this.runningQueue.delete(t.taskId),t.reject(s),t.taskStatus="rejected",this.taskFinish&&this.taskFinish(t),this.debug&&console.log(`任务id${t.taskId}失败完成，完成回调：[${s}]`,"当前并发数",this.runningCount),this.checkQueue()})))}checkQueue(){if(!this.isStop)if(0!==this.waitQueue.length||0!==this.runningCount){if(this.waitQueue.length>0&&this.runningCount<this.limit){const t=this.waitQueue.shift();this.debug&&console.log("并发池出现空位，取出任务",t),this.runTask(t)}}else this.finishCallBack&&this.finishCallBack()}}const c=i({__name:"basePromisePool",setup(t){const s=new l({maxCount:3,debug:!0,customTaskInfo:{title:"文件分片并发请求"},onFinish:()=>{i.value=!1,console.log("请求均已结束")},onTaskFinish:t=>{console.log("单个请求结束",t)}}),i=o(!1),r=()=>async()=>await new Promise((t=>setTimeout(t,Math.floor(2001*Math.random()+1e3)))),c=()=>{if(!i.value){i.value=!0;for(let t=0;t<10;t++){const t=r();s.addTask(t)}}},k=()=>{const t=s.stopTask();i.value=!1,console.log("中断后，还在运行的任务",t)};return(t,s)=>{const o=e("vir-button");return n(),d("div",null,[a(o,{type:"primary",onClick:c,loading:i.value},{default:h((()=>[u("发送批量请求")])),_:1},8,["loading"]),a(o,{type:"danger",onClick:k},{default:h((()=>[u("中断批量请求")])),_:1})])}}}),k={class:"markdown-body"},g=r('<h1 id="virpromisepool-%E5%B9%B6%E5%8F%91%E6%B1%A0" tabindex="-1">VirPromisePool 并发池</h1><p>基于<code>Promise</code>的前端并发异步控制 SDK，并支持<code>数量控制</code> <code>中断</code>等功能。<br> VirPromisePool 提供多种回调 hook,可灵活操控并发任务， 满足基本相关业务需求。<br> 满足场景：<code>文件分片上传</code> <code>项目全局环境请求控制</code>等需要异步并发控制的场景</p><blockquote><p>Tip<br> 若 VirPromisePool 未能很好的支持您的业务场景，欢迎向我们<a href="https://github.com/CoderYc0923/virtual-ui/issues">反馈</a><br> 收到反馈后我们会尽快处理解决。</p></blockquote><h2 id="%E6%A1%88%E4%BE%8B" tabindex="-1">案例</h2><blockquote><p>Tip<br> 详情见控制台（F11）</p></blockquote>',5),m=r('<h2 id="virpromisepool-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0" tabindex="-1">VirPromisePool 初始化参数</h2><table><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th><th>返回值</th></tr></thead><tbody><tr><td>maxCount</td><td>可并发上传的最大数量</td><td>number</td><td>—</td><td>5</td><td>-</td></tr><tr><td>debug</td><td>是否开启流程打印（开启后见控制台）</td><td>boolean</td><td>—</td><td>false</td><td>-</td></tr><tr><td>onFinish</td><td>并发任务全部完成的回调</td><td>Function</td><td>—</td><td>-</td><td>-</td></tr><tr><td>onTaskFinish</td><td>单个并发任务完成的回调</td><td>Function</td><td>—</td><td>-</td><td><code>taskWithCallbacks&lt;T&gt;</code>（返回当前完成的任务）</td></tr><tr><td>customTaskInfo</td><td>并发任务自定义公共参数信息</td><td>Object</td><td>—</td><td>{}</td><td>-</td></tr></tbody></table><h2 id="virpromisepool-%E6%96%B9%E6%B3%95" tabindex="-1">VirPromisePool 方法</h2><table><thead><tr><th>函数名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>addTask</td><td>添加任务</td><td>task: <code>() =&gt; Promise&lt;T&gt;</code></td></tr><tr><td>stopTask</td><td>中断任务，返回当前还在运行的任务数组<code>taskWithCallbacks&lt;T&gt;</code></td><td>-</td></tr></tbody></table>',4),b={__name:"README",setup:(t,{expose:s})=>(s({frontmatter:{}}),(t,s)=>{const i=e("show-code");return n(),d("div",k,[g,a(i,{showPath:"promisePool/components/basePromisePool"},{default:h((()=>[a(c)])),_:1}),m])})};export{b as default};
